<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 *
 * Updates the entity cache for a newly inserted entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity that was inserted.
 */
function static_custom_api_entity_insert(EntityInterface $entity) {
  // Update the entity cache for the newly inserted entity.
  \Drupal::service('static_custom_api.entity_live_alter')->updateEntityCache($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Updates the entity cache when an entity is updated.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity that was updated.
 */
function static_custom_api_entity_update(EntityInterface $entity) {
  // Update the entity cache when an entity is updated.
  \Drupal::service('static_custom_api.entity_live_alter')->updateEntityCache($entity);
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes the entity cache when an entity is deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity that was deleted.
 */
function static_custom_api_entity_delete(EntityInterface $entity) {
  // Delete the entity cache when an entity is deleted.
  \Drupal::service('static_custom_api.entity_live_alter')->deleteEntityCache($entity);
}

/**
 * Implements hook_entity_translation_delete().
 *
 * Deletes the entity cache when a translation of an entity is deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $translation
 *   The translation entity that was deleted.
 */
function static_custom_api_entity_translation_delete(EntityInterface $translation) {
  // Delete the entity cache when a translation of an entity is deleted.
  \Drupal::service('static_custom_api.entity_live_alter')->deleteEntityCache($translation);
}
